"------------------------------------------------------------------------------
" プラグイン設定 Plugins
"------------------------------------------------------------------------------

"----------------------------
" FZF
"----------------------------
"nnoremap <leader>e :call FzyCommand("find -type f", ":e")<cr>
"nnoremap <leader>v :call FzyCommand("find -type f", ":vs")<cr>
"nnoremap <leader>s :call FzyCommand("find -type f", ":sp")<cr>
"nnoremap <leader>t :call FzyCommand("find -type f", ":tabnew")<cr>
"
"" ag
"nnoremap <leader>e :call FzyCommand("ag . --silent -l -g ''", ":e")<cr>
"nnoremap <leader>v :call FzyCommand("ag . --silent -l -g ''", ":vs")<cr>
"nnoremap <leader>s :call FzyCommand("ag . --silent -l -g ''", ":sp")<cr>
"nnoremap <leader>t :call FzyCommand("ag . --silent -l -g ''", ":tabnew")<cr>

"" pt
"nnoremap <leader>e :call FzyCommand("pt . -l", ":e")<cr>
"nnoremap <leader>v :call FzyCommand("pt . -l", ":vs")<cr>
"nnoremap <leader>s :call FzyCommand("pt . -l", ":sp")<cr>
"nnoremap <leader>t :call FzyCommand("pt . -l", ":tabnew")<cr>

let g:fzf_layout = {'down': '~40%'}
let g:fzf_buffers_jump = 1
let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'
let g:fzf_tags_command = 'ctags -R'
nnoremap <silent> <leader><leader> :GFiles<CR> " fzf(:GFiles)
nnoremap <silent> <leader><enter>  :Files<CR> " fzf(:Files)
nnoremap <silent> <leader><tab>    :Buffers<CR> " fzf(:Buffers)
nnoremap <silent> <leader>a        :Ag<CR> " fzf(:Ag)
nnoremap <silent> <leader>g        :GFiles?<CR> " fzf(:GFiles?)

"" cat /usr/share/dict/words
"nnoremap <leader><Enter> <plug>(fzf-complete-word)
"" path completion using find (file + dir)
"imap <leader>f <plug>(fzf-complete-path)
"" file completion using find
"imap <leader>F <plug>(fzf-complete-file)
"" file completion using ag
"imap <leader>a <plug>(fzf-complete-file-ag)
"" line completion (all open buffers)
"imap <leader>b <plug>(fzf-complete-line)
"" line completion (current buffer only)
"imap <leader>B <plug>(fzf-complete-buffer-line)
"" key mapping
"nmap <leader>m <plug>(fzf-maps-n)
"imap <leader>m <plug>(fzf-maps-i)
"xmap <leader>m <plug>(fzf-maps-x)
"omap <leader>m <plug>(fzf-maps-o)


"----------------------------
" TComment
"----------------------------
nnoremap <C-_><C-_> :TComment<CR>
vnoremap <C-_><C-_> :TComment<CR>

"----------------------------
" memolist
"----------------------------
let g:memolist_fzf = 1
let g:memolist_prompt_tags= 1
let g:memolist_prompt_categories= 1
nnoremap <leader>ml :MemoList<CR>
nnoremap <leader>mn :MemoNew<CR>
nnoremap <leader>mg :MemoGrep<CR>

"----------------------------
" lsp-completion
"----------------------------
" PHP
au User lsp_setup call lsp#register_server({
    \ 'name': 'php-language-server',
    \ 'cmd': {server_info->['php', expand('~/.vim/plugged/php-language-server/bin/php-language-server.php')]},
    \ 'whitelist': ['php'],
    \ })

" Python
" need 'pip install python-language-server'
if executable('pyls')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'whitelist': ['python'],
        \ })
endif

" TypeScript
" need npm install -g typescript typescript-language-server or vim-plugin ryanolsonx/vim-lsp-typescript
if executable('typescript-language-server')
  au User lsp_setup call lsp#register_server({
        \ 'name': 'typescript-language-server',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
        \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
        \ 'whitelist': ['typescript', 'typescript.tsx'],
         })
endif

" "----------------------------
" " vue
" "----------------------------
" autocmd BufNewFile,BufRead *.jsx,*.vue let b:jsx_ext_found = 1
" autocmd BufNewFile,BufRead *.jsx,*.vue set filetype=javascript.jsx
" " autocmd BufNewFile,BufRead *.js
"   \ if <SID>EnableJSX() | set filetype=javascript.jsx | endif
"
" "----------------------------
" " javascript syntax check
" "----------------------------
" "syntax hilightを自動で呼び出す
" function! EnableJavascript()
"   " Setup used libraries
"   let g:used_javascript_libs = 'jquery,underscore,react,flux,jasmine,d3'
"   let b:javascript_lib_use_jquery = 1
"   let b:javascript_lib_use_underscore = 1
"   let b:javascript_lib_use_react = 1
"   let b:javascript_lib_use_flux = 1
"   let b:javascript_lib_use_jasmine = 1
"   let b:javascript_lib_use_d3 = 1
"   " let g:flow#flowpath = /usr/local/bin/flow
"   " let g:flow#autoclose = 1
"   " let g:javascript_plugin_flow = 1
" endfunction
" " autocmd FileType javascript,javascript.jsx call EnableJavascript()
" autocmd BufNewFile,BufRead javascript,javascript.jsx call EnableJavascript()

"----------------------------
" MarkdownPreview
"----------------------------
" nnoremap <silent><leader>p :MarkdownPreview<CR>
" let g:mkdp_refresh_slow = 1
" let g:mkdp_echo_preview_url = 1
" let g:mkdp_browser = 'vivaldi-stable'
" autocmd BufNewFile,BufRead *.{md,mdwn,mkd,mkdn,mark*} set filetype=markdown

"----------------------------
" Previm
"----------------------------
"TODO <leader>o OpenBrowser実行したあとでないと起動しない
nnoremap <silent><leader>P :PrevimOpen<CR>
augroup PrevimSettings
  autocmd!
  autocmd BufNewFile,BufRead *.{md,mdwn,mkd,mkdn,mark*} set filetype=markdown
augroup END

"----------------------------
" OpenBrowser
"----------------------------
let g:netrw_nogx = 1 " diable netrw's gx mapping.
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)
nnoremap <leader>o :<C-u>execute "OpenBrowserSmartSearch" "file:///" . expand('%:p:gs?\\?/?')<CR>
let g:openbrowser_browser_commands = [ {'name': 'vivaldi-stable',  'args': ['{browser}', '{uri}']} ]

"----------------------------
" QuickRun
"----------------------------
" rev用
let g:quickrun_config = {}
let s:rev_command = './rev'
if executable(s:rev_command)
    let g:quickrun_config['php'] = {
        \ 'command': s:rev_command,
        \ 'cmdopt': 'exec',
        \ 'exec': '%c %o %s',
        \ }
endif

"----------------------------
" ALE
"----------------------------
" ale
let g:ale_lint_on_enter = 0
let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
nnoremap <silent> <leader>p <Plug>(ale_previous)
nnoremap <silent> <leader>j <Plug>(ale_next_wrap)
nnoremap <silent> <leader>k <Plug>(ale_prev_wrap)
function! s:ale_list()
  let g:ale_open_list = 1
  call ale#Queue(0, 'lint_file')

endfunction
command! ALEList call s:ale_list()
nnoremap <leader>m  :ALEList<CR>
" autocmd MyAutoGroup FileType qf nnoremap <silent> <buffer> q :let g:ale_open_list = 0<CR>:q!<CR>
" autocmd MyAutoGroup FileType help,qf,man,ref let b:ale_enabled = 0
augroup MyAutoGroup
  autocmd FileType qf nnoremap <silent> <buffer> q :let g:ale_open_list = 0<CR>:q!<CR>
  autocmd FileType help,qf,man,ref let b:ale_enabled = 0
augroup END

" if dein#tap('lightline.vim')
"   autocmd MyAutoGroup User ALELint call lightline#update()
" endif

let g:ale_sh_shellcheck_options = '-e SC1090,SC2059,SC2155,SC2164'

